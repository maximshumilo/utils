[tool.poetry]
name = "Utils"
version = "0.1.0"
description = "Utils of Maksim Shumilo"
authors = ["shumilo.mk@gmail.com"]
readme = "README.md"
packages = [{include = "shumilo_utils"}]

[tool.poetry.dependencies]
python = "~3.11"

[tool.poetry.group.dev.dependencies]
pytest = ">=8,<9"
pytest-cov = ">=6,<7"
Faker = "^9,<10"
ruff = ">=0.11.0,<1"
isort = ">=6,<7"
pre-commit = ">=4,<5"
poetry-core = ">=2,<3"

[tool.isort]
line_length = 120
multi_line_output = 3 # Use parentheses for group
include_trailing_comma = true  # Incldue coma in the end of the line
use_parentheses = true  # Use parentheses for multiline imports
combine_as_imports = true  # Allow group imports with aliases
lines_after_imports = 2
force_grid_wrap = 2

[tool.ruff]
include = ["shumilo_utils/**/*.py"]
fix = true

[tool.ruff.lint]
extend-select = [
    "ANN", # flake8-anotations
    "E", # pycodestyle err
    "W", # pycodestyle warn
    "F", # Pyflakes
    "B", # flake8-bugbear
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    "UP", # pyupgrade
    "Q",
    "D", # Enable check docstrings
]

extend-ignore = [
    'D100', # Docs in a public module
    'D101', # Docs in public class
    'D104', # Docs in a public package - __init__.py
    'D105', # Docs in magic methods
    'D106', # Docs in public nested class
    'ANN204', # Missing return type annotation for special method `__init__`
    'ANN002', # Missing type annotation for `*args`
    'ANN003', # Missing type annotation for `**kwargs`
    'ANN202', # Missing return type annotation for private function `wrapper`
]

[tool.ruff.lint.pycodestyle]
max-line-length = 120

[tool.ruff.lint.pydocstyle]
convention = "numpy"

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = "ignore::DeprecationWarning"
pythonpath = [
    "./shumilo_utils"
]
addopts = """\
  --strict-markers \
  --show-capture=no  \
"""

[tool.coverage.report]
precision = 2
exclude_lines = ["pragma: no cover"]

[build-system]
requires = ["poetry-core>=2.0.0"]
build-backend = "poetry.core.masonry.api"